def tarea1_prog():
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.5)
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  step_count_8267d60a_3b7b_4bfa_8cc4_ff4b2359f722 = 0.0
  thread Step_Counter_Thread_88acbb50_47bd_4cec_9cb7_5f447da0dcf2():
    while (True):
      step_count_8267d60a_3b7b_4bfa_8cc4_ff4b2359f722 = step_count_8267d60a_3b7b_4bfa_8cc4_ff4b2359f722 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_88acbb50_47bd_4cec_9cb7_5f447da0dcf2()
  set_safety_mode_transition_hardness(1)
  global tcp_fixed=p[-0.14000000109826502,-0.43999999878791873,0.36000000001578136,2.8799903984527735E-8,3.1399999817384012,3.736227238485684E-8]
  $ 1 "Robot Program"
  $ 2 "Script: tarea1.script"
      def tarea1(tipo_oper,num_oper):
  
      	cont_oper=0
      	while(cont_oper<num_oper):
      		if tipo_oper==1:
      			#movimiento1()
      		elif tipo_oper==2:
      			movimiento2()
      		elif tipo_oper==3:
      			movimiento3()
      		else:
      			halt
      		end
  		cont_oper=cont_oper+1
      	end
      end
  $ 3 "Script: movimiento3.script"
  def movimiento3():
  	#Waypoints guardados como poses
  	wp1=p[0.2,-0.3,0.4,	0,3.14,0]
  	wp2=p[0.2,-0.3,0.2,	0,3.14,0]
  	wp3=p[0.4,0,0.4,		0,3.14,0]
  	wp4=p[0.2,0.3,0.4,	0,3.14,0]
  	wp5=p[0.2,0.3,0.2,	0,3.14,0]
  	lpai=[-0.604,-1.204,-2.091,-1.417,1.569,0]
  
  	#Movimientos
  	movej(get_inverse_kin(wp1,qnear=lpai))
  
  	movel(wp2)
  	movel(wp1)
  
  	movej(get_inverse_kin(wp3))
  	popup("Continue cuando el proceso haya acabado",title="¿Ya acabo el proceso?",blocking=True)
  	movej(get_inverse_kin(wp4))
  
  	movel(wp5)
  	movel(wp4)
  
  	movej(get_inverse_kin(wp1,qnear=lpai))
  end
  $ 4 "Script: movimiento2.script"
  def movimiento2():
  	#Waypoints definidos por poses
  	wp1=p[0.2,-0.3,0.4,	0,3.14,0]
  	wp2=p[0.2,-0.1,0.4,	0,3.14,0]
  	wp3=p[0.2,-0.1,0.3,	0,3.14,0]
  	wp4=p[0.2,0,0.3,		0,3.14,0]
  	wp5=p[0.2,0,0.2,		0,3.14,0]
  	wp6=p[0.2,-0.3,0.2,	0,3.14,0]
  	lpai=[-0.604,-1.204,-2.091,-1.417,1.569,0]
  
  	#Movimientos
  	movej(get_inverse_kin(wp1,qnear=lpai))
  	movel(wp2)
  	movel(wp3)
  	movel(wp4)
  	movel(wp5)
  	movel(wp6)
  	movel(wp1)
  end
  $ 5 "Script: movimiento1.script"
  def movimiento1():
  
  end
  $ 6 "tipo_oper≔'Tipo de Operacion:'"
  global tipo_oper=request_integer_from_primary_client("Tipo de Operacion:")
  $ 7 "num_oper≔'Numero de Operaciones:'"
  global num_oper=request_integer_from_primary_client("Numero de Operaciones:")
  $ 8 "tarea1(tipo_oper,num_oper)"
  tarea1(tipo_oper,num_oper)
end
